syntax = "proto2";
package hw.trezor.messages.beam;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageBeam";

/**
 * Structure representing beam KIDV (Key ID, Value) structure
 * @embed
 */
message BeamKeyIDV {(
    optional uint64 idx = 1;
    optional uint32 type = 2;
    optional uint32 sub_idx = 3;

    optional uint64 value = 4;
}

/**
 * Request: Generate key from given KIDV and export it's image
 * @start
 * @next BeamPublicKey
 */
message BeamGenerateKey {
    optional BeamKeyIDV kidv = 1;  // KIDV to generate key from
    optional bool is_coin_key = 2; // specifies, whether we should create either common or coin key
}

/**
 * Request: Generate nonce for the given slot index
 * @start
 * @next BeamECCImage
 * @next Failure
 */
message BeamGenerateNonce {
    optional uint32 slot = 1; // Slot where generated nonce should be stored
}

/**
 * Structure representing ECC point's image
 * @embed
 * @end
 */
message BeamECCImage {
    optional bytes image_x = 1; // Image of ECC point (only x)
}

/**
 * Structure representing BeamSignature
 * @embed
 * @end
 */
message BeamSignature {
    optional bytes nonce_pub_x = 1;     // X part of public nonce of the signature
    optional bytes nonce_pub_y = 2;     // Y part of public nonce of the signature (0 or 1)
    optional bytes sign_k = 3;          // k part of the signature
}

/**
 * Request: Display Hello World! (Now used to test different functions of BEAM)
 * @start
 * @next BeamConfirmResponseMessage
 */
message BeamDisplayMessage {
    optional string text = 1;           // text to send to device (to show on display if show_display==true)
    optional bool show_display = 2;     // optionally show on display before sending the result
}

/**
 * Response: A response to BEAM's ConfirmRequest message. For now it's used only for response from BeamDisplayMessage
 * (a.k.a. "HelloWorld") message.
 * @end
 */
message BeamConfirmResponseMessage {
    optional string text = 1;   // text that was required to confirm or reject
    optional bool response = 2; // A confirmation/rejection of request message
}

/**
 * Request: Send message in human-readable format to sign it's hash according to BEAM rules.
 * @next BeamSignedMessage
 * @next Failure
 * @end
 */
message BeamSignMessage {
    optional string msg = 1;        // text in human-readable format that needs to be signed
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: A response to signing message request.
 * @end
 */
message BeamSignedMessage {
    optional BeamSignature signature = 1; // BEAM signature
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
message BeamVerifyMessage {
    optional BeamSignature signature = 1;   // BEAM message signature
    optional BeamPublicKey public_key = 2;  // BEAM public key
    optional bytes message = 3;             // message to verify
}

/**
 * Request: Ask device for public key
 * @start
 * @next BeamPublicKey
 * @next Failure
 */
message BeamGetPublicKey {
    optional bool show_display = 1; // optionally show on display before sending the result
}

/**
 * Response: Contains public key derived from device private seed or an image of KeyIDV
 * @end
 */
message BeamPublicKey {
    optional bytes pub_x = 1; // public key - X point
    optional bytes pub_y = 2; // public key - Y point
}

/**
 * Request: Ask device for an owner key
 * @start
 * @next BeamOwnerKey
 * @next Failure
 */
message BeamGetOwnerKey {
    optional bool show_display = 1; // optionally show on display before sending the result
}

/**
 * Response: Contains owner key from device
 * @end
 */
message BeamOwnerKey {
    optional bytes key = 1; // owner key
}


//////////////////// TMP ////////////////////
/**
 * Request: ask device to sign SEND Beam transaction
 * @start
 * @next BeamSignedTx
 */
message BeamSignSendTx {
    repeated uint32 address_n = 1;				// BIP-32 path. For compatibility with other wallets, must be m/44'/144'/index'
    optional uint64 fee = 2;					// fee (in GROTH) for the transaction
    optional uint32 flags = 3;					// transaction flags
    optional BeamPayment payment = 4;			// Payment transaction type

    /**
     * Payment transaction type
     * - simple A sends money to B
     * - only a subset of fields is supported
     * - see https://
     */
    message BeamPayment {
        optional uint64 amount = 1;				// only GROTH is supported at the moment so this an integer
        optional string destination = 2;		// destination account address
        optional uint32 destination_tag = 3;	// destination tag to identify payments
    }
}

/**
 * Request: ask device to sign RECEIVE Beam transaction
 * @start
 * @next BeamSignedTx
 */
message BeamSignReceiveTx {
    repeated uint32 address_n = 1;				// BIP-32 path. For compatibility with other wallets, must be m/44'/144'/index'
    optional uint64 fee = 2;					// fee (in GROTH) for the transaction
    optional uint32 flags = 3;					// transaction flags
    optional BeamPayment payment = 4;			// Payment transaction type
    optional BeamSignature signature = 5;		// Beam signature

        /**
         * Payment transaction type
         * - simple A sends money to B and B wants to receive signed tx and sign it with his own signature
         * - only a subset of fields is supported
         * - see https://
         */
        message BeamPayment {
            optional uint64 amount = 1;				// only GROTH is supported at the moment so this an integer
            optional string destination = 2;		// destination account address
            optional uint32 destination_tag = 3;	// destination tag to identify payments
        }
}

/**
 * Response: signature for transaction
 * @end
 */
message BeamSignedTx {
    optional bytes signature = 1;
    optional bytes serialized_tx = 2;
}

